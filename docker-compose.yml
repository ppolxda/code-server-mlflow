version: "3.4"
x-common:
  environment:
    # MLFLOW config

    &x-common-env
    MLFLOW_TRACKING_URI: http://localhost/mlflow
    # MLFLOW_TRACKING_URI: http://mlflow:5000
    MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    MLFLOW_TRACKING_TOKEN: ${MLFLOW_TRACKING_TOKEN:-mlflow}
    AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minioadmin}
    AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
    GUNICORN_CMD_ARGS: "--timeout=9999999"

    # MINIO config
    MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
    MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    # MINIO_SITE_NAME: ${MINIO_SITE_NAME:-xocr-s3}
    # MINIO_SITE_REGION: ${MINIO_SITE_REGION:-us-west-1}
    MINIO_BUCKET: ${MINIO_BUCKET:-mlflowres}
    # MINIO_SERVER_URL: ${MINIO_SERVER_URL:-http://127.0.0.1:9000}
    # MINIO_CONSOLE_SUBPATH: "/minio/"
    MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost/minio}

    # POSTGRES config
    POSTGRES_USER: ${POSTGRES_USER:-mlflow}
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mlflow}
    POSTGRES_DB: ${POSTGRES_DB:-mlflow_tracking}
    DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER:-mlflow}:${POSTGRES_PASSWORD:-mlflow}@postgres:5432/${POSTGRES_DB:-mlflow_tracking}

    # Local config
    TZ: Asia/Shanghai

services:
  mlflow:
    image: mlflow-tracking
    build:
      context: .
      dockerfile: ./docker/Dockerfile.mlflow-tracking
    ports:
      - 5000:5000

    # "mlflow server --static-prefix /mlflow --backend-store-uri $$DATABASE_URL --artifacts-destination s3://$$MINIO_BUCKET --serve-artifacts --host 0.0.0.0 --port 5000 "
    command:
      [
        "/bin/sh",
        "-c",
        "mlflow server --static-prefix /mlflow --backend-store-uri $$DATABASE_URL --default-artifact-root s3://$$MINIO_BUCKET --host 0.0.0.0 --port 5000",
      ]
    environment:
      <<: *x-common-env
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: always

  nginx:
    image: nginx
    # user: "${UID}:${GID}"
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/nginx.crt:/etc/letsencrypt/nginx.crt
      - ./docker/nginx/nginx.key:/etc/letsencrypt/nginx.key
    depends_on:
      code-server:
        condition: service_started
      jupyter-notebook:
        condition: service_started
      mlflow:
        condition: service_started
      minio:
        condition: service_healthy

    # depends_on:
    #   webserver:
    #     condition: service_healthy
    #   scheduler:
    #     condition: service_healthy
    #   worker:
    #     condition: service_healthy
    #   flower:
    #     condition: service_healthy
    restart: always

  postgres:
    image: postgres:14.3
    environment:
      <<: *x-common-env
    ports:
      - 5432:5432
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    command: postgres -c max_connections=500
    healthcheck:
      test: ["CMD", "sh", "-c", "pg_isready", "-U", "$$POSTGRES_USER"]
      interval: 5s
      retries: 5
    restart: always

  minio:
    image: minio/minio:RELEASE.2023-09-23T03-47-50Z
    # user: "${UID}:${GID}"
    environment:
      <<: *x-common-env
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio-volume:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 1s
      timeout: 10s
      retries: 5
    restart: always

  minio-create-bucket:
    image: minio/mc
    environment:
      <<: *x-common-env
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c " mc alias set minio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD && if ! mc ls minio | grep --quiet $$MINIO_BUCKET; then
        mc mb minio/$$MINIO_BUCKET
      else
        echo '$$MINIO_BUCKET already exists'
      fi "

  jupyter-notebook:
    image: jupyter/datascience-notebook
    volumes:
      - ${LOCAL_WORKING_DIR}:/home/jovyan/work
      # - ${LOCAL_SSL_CERTS}:/etc/ssl/notebook
    ports:
      - 8888:8888
    command: "start-notebook.sh \
      --NotebookApp.base_url='/jupyter'
      --NotebookApp.password=${ACCESS_TOKEN}
      --NotebookApp.token=${ACCESS_TOKEN}"

  code-server:
    # image: linuxserver/code-server
    image: code-server-python
    build:
      context: .
      dockerfile: ./docker/Dockerfile.vscode
    environment:
      - PUID=1000
      - PGID=1000
      # - TZ=Europe/London
      - PASSWORD=${VSCODE_PASSWORD:-password} #optional
      - SUDO_PASSWORD=${VSCODE_SUDO_PASSWORD:-password} #optional
      - PROXY_DOMAIN=code-server.my.domain #optional
    volumes:
      - ${VSCODE_CONFIG}/.config:/home/coder/.config
      - ${VSCODE_CONFIG}/project:/home/coder/project
    ports:
      - 8080:8080

volumes:
  minio-volume:
  postgres-volume:
